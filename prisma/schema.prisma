// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  name      String?
  password  String?
  googleId  String?  @unique
  image     UserImage?
  projects  Project[]
  notes     Note[]
  chats     Chat[]
  chatParticipants ChatParticipant[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ChatMessage ChatMessage[]
}

model UserImage {
  id        String   @id @default(cuid())
  altText   String?
  contentType String?
  blob      Bytes
  url       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id        String   @id @default(cuid())
  name      String
  description String?
  starred     Boolean @default(false)
  parentId    String?
  parent    Project?  @relation("ProjectChildren", fields: [parentId], references: [id])
  children    Project[] @relation("ProjectChildren")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notes       Note[]
  chats       Chat[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
}

model Note {
  id        String   @id @default(cuid())
  title     String?
  content   String //plain text for quick drafts
  editorContent String? //json for rich text editor
  summary     String? //ai generated summary
  type        String? //"draft"
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chats     Chat[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String   @id @default(cuid())
  type      String //"solo", "group"
  currentModel String? //"gpt-4o", "gpt-4o-mini", "claude-3-5-sonnet", "grok-3-1"
  projectId      String?
  project        Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId      String?
  note        Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messages    ChatMessage[]
  participants ChatParticipant[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId  String? //nullable for ai responses
  sender    User?   @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  text   String
  model    String? //"gpt-4o", "gpt-4o-mini", "claude-3-5-sonnet", "grok-3-1"
  timestamp DateTime @default(now())
}

model ChatParticipant {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  joinedAt  DateTime @default(now())
}